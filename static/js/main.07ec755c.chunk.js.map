{"version":3,"sources":["Header.js","Footer.js","Playground.js","App.js","serviceWorker.js","index.js"],"names":["Header","href","src","popup","Footer","object","target","Playground","state","max","multiple","updateExpression","onChangeExpression","event","setState","input","value","onChangeMultiple","checked","onExecute","preventDefault","props","onExpressionChange","expression","this","safe","includes","sparql","className","onSubmit","onChange","required","type","limit","item","i","key","dest","test","rel","React","Component","App","savedState","prevProps","webId","decodeURIComponent","window","location","hash","substr","replace","encodeURIComponent","withWebId","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07ec755c.chunk.js","sourcesContent":["import React from 'react';\nimport { LoggedIn, LoggedOut, AuthButton, Link, Name } from '@solid/react';\nimport './Header.css';\n\nexport default function Header() {\n  return (\n    <header>\n      <h1>Solid LDflex playground</h1>\n      <p>\n        <LoggedOut>You are not logged in.</LoggedOut>\n        <LoggedIn>Welcome, <Link href=\"user\"><Name src=\"user\"/></Link>!</LoggedIn>\n      </p>\n      <AuthButton popup=\"https://solidcommunity.net/.well-known/solid/login\"/>\n    </header>\n  );\n}\n","import React from 'react';\nimport { Label, Link, Like } from '@solid/react';\nimport './Footer.css';\n\nexport default function Footer() {\n  return (\n    <footer>\n      <p>\n        <Like object=\"https://ldflex.github.io/Solid-Playground/\">the LDflex playground</Like>\n      </p>\n      <p>\n        Created by \n        <Link href=\"[https://ruben.verborgh.org/profile/#me].homepage\" target=\"_blank\">\n          <Label src=\"[https://ruben.verborgh.org/profile/#me]\"/>\n        </Link>.\n        Source code on \n        <a href=\"https://github.com/LDflex/Solid-Playground/\">GitHub</a>.\n      </p>\n    </footer>\n  );\n}\n","import React from 'react';\nimport { Value, List } from '@solid/react';\nimport './Playground.css';\n\nexport default class Playground extends React.Component {\n  state = {\n    max: 20,\n    multiple: true,\n    ...this.updateExpression(),\n  }\n\n  componentDidUpdate({ expression }) {\n    if (this.props.expression !== expression)\n      this.updateExpression();\n  }\n\n  updateExpression(input) {\n    const expression = input || this.props.expression || '';\n    // An expression has no side effects if it has no method calls\n    // (conservatively identified by a parenthesis)\n    const safe = !expression.includes('(');\n    const state = {\n      input: expression,\n      // Don't evaluate unsafe expressions unless the user asks\n      expression: input || safe ? expression : '',\n      // Avoid evaluating unsafe expressions a second time\n      sparql: expression && safe ? `${expression}.sparql` : '',\n    };\n    return this.state ? this.setState(state) : state;\n  }\n\n  onChangeExpression = event => {\n    this.setState({ input: event.target.value });\n  }\n\n  onChangeMultiple = event => {\n    this.setState({ multiple: event.target.checked });\n  }\n\n  onExecute = event => {\n    event.preventDefault();\n    const { input } = this.state;\n    this.updateExpression(input);\n    if (this.props.onExpressionChange)\n      this.props.onExpressionChange(input);\n  }\n\n  render() {\n    const { input, multiple, max, expression, sparql } = this.state;\n    return (\n      <form className=\"playground\" onSubmit={this.onExecute}>\n        <p className=\"expression\">\n          <label><code>solid.data</code></label>\n          <input value={input} onChange={this.onChangeExpression} required />\n          <button>Execute</button>\n        </p>\n        <p className=\"multiple\">\n          <label>\n            <input type=\"checkbox\" checked={multiple} onChange={this.onChangeMultiple}/>\n            multiple results\n          </label>\n        </p>\n\n        <h3>Expression</h3>\n        <pre className=\"expression\"><code>{expression}</code></pre>\n\n        { !multiple ? <div>\n            <h3>Single result</h3>\n            <p className=\"single\"><Value src={expression}/></p>\n          </div> : <div>\n            <h3>Multiple results <em>(first {max})</em></h3>\n            <List src={expression} limit={max}>{(item, i) =>\n              <li key={i}>{linkTo(`${item}`)}</li>}\n            </List>\n          </div>\n        }\n\n        <h3>Corresponding SPARQL query</h3>\n        <pre className=\"sparql\"><code><Value src={sparql}/></code></pre>\n      </form>\n    );\n  }\n}\n\nfunction linkTo(dest) {\n  return !/^https?:/.test(dest) ? dest :\n    <a href={dest} target=\"_blank\" rel=\"noopener noreferrer\">{dest}</a>;\n}\n","import React from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport Playground from './Playground';\nimport { withWebId } from '@solid/react';\nimport './App.css';\n\nconst defaultExpression = \"['https://ruben.verborgh.org/profile/#me'].friends.firstName\";\n\nclass App extends React.Component {\n  state = this.savedState;\n\n  // Save the state in the URL fragment\n  get savedState() {\n    return { expression: decodeURIComponent(window.location.hash.substr(1)) };\n  }\n  set savedState({ expression }) {\n    window.location.replace(`#${encodeURIComponent(expression)}`);\n  }\n\n  componentDidUpdate(prevProps) {\n    // If the user just logged in, show an example with their WebID\n    const { webId } = this.props;\n    if (webId && webId !== prevProps.webId && !this.savedState.expression)\n      this.setState({ expression: `[${webId}].name` });\n  }\n\n  onExpressionChange = expression => {\n    this.savedState = { expression };\n  }\n\n  render() {\n    return (\n    <div>\n      <Header/>\n      <main>\n        <h2>\n          Write your \n          <a href=\"https://ldflex.github.io/Solid-Playground/\">\n            Solid LDflex</a> expression\n        </h2>\n        <Playground expression={this.state.expression || defaultExpression}\n                    onExpressionChange={this.onExpressionChange}/>\n      </main>\n      <Footer/>\n    </div>\n    );\n  }\n}\nexport default withWebId(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}